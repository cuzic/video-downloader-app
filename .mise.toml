# mise configuration for Video Downloader
# Tool version management and task runner

[tools]
# Runtime and language versions
node = "20.10.0"
pnpm = "9.7.0"

[env]
# Environment variables
NODE_ENV = "development"
ELECTRON_IS_DEV = "1"
DEV_PORT = "3000"

# Database
DB_PATH = "./data/video-downloader.db"
DB_LOG_LEVEL = "info"

# Logging
LOG_LEVEL = "debug"

# Security
ENABLE_CSP = "true"
ALLOW_EXTERNAL_URLS = "false"

# Download settings
MAX_CONCURRENT_DOWNLOADS = "3"
SEGMENT_RETRY_COUNT = "3"

[tasks.install]
description = "Install dependencies"
run = "pnpm install"

[tasks.dev]
description = "Start development server"
run = "pnpm run dev"
depends = ["install"]

[tasks.build]
description = "Build for production"
run = "pnpm run build"
depends = ["clean", "typecheck"]

[tasks.test]
description = "Run all tests"
run = "pnpm run test"

[tasks."test:watch"]
description = "Run tests in watch mode"
run = "pnpm run test:watch"

[tasks."test:coverage"]
description = "Run tests with coverage"
run = "pnpm run test:coverage"

[tasks."test:unit"]
description = "Run unit tests only"
run = "pnpm run test:unit"

[tasks."test:e2e"]
description = "Run E2E tests"
run = "pnpm run test:e2e"
depends = ["build"]

[tasks.lint]
description = "Run ESLint"
run = "pnpm run lint"

[tasks."lint:fix"]
description = "Run ESLint with auto-fix"
run = "pnpm run lint:fix"

[tasks.format]
description = "Format code with Prettier"
run = "pnpm run format"

[tasks."format:check"]
description = "Check code formatting"
run = "pnpm run format:check"

[tasks.typecheck]
description = "Run TypeScript type checking"
run = "pnpm run typecheck"

[tasks.check]
description = "Run all checks (type, lint, format)"
depends = ["typecheck", "lint", "format:check"]

[tasks."db:generate"]
description = "Generate database migrations"
run = "pnpm run db:generate"

[tasks."db:push"]
description = "Push database changes"
run = "pnpm run db:push"

[tasks."db:studio"]
description = "Open Drizzle Studio"
run = "pnpm run db:studio"

[tasks."db:migrate"]
description = "Run database migrations"
run = "pnpm run db:migrate"
depends = ["db:generate"]

[tasks.clean]
description = "Clean build artifacts (OS command)"
run = "rm -rf dist dist-electron"

[tasks."clean:all"]
description = "Clean everything including dependencies (OS command)"
run = "rm -rf dist dist-electron node_modules pnpm-lock.yaml .pnpm-store"

[tasks."clean:cache"]
description = "Clean pnpm cache (OS command)"
run = "pnpm store prune"

[tasks.dist]
description = "Package application for distribution"
run = "pnpm exec electron-builder"
depends = ["build"]

[tasks."dist:mac"]
description = "Package for macOS"
run = "pnpm exec electron-builder --mac"
depends = ["build"]

[tasks."dist:win"]
description = "Package for Windows"
run = "pnpm exec electron-builder --win"
depends = ["build"]

[tasks."dist:linux"]
description = "Package for Linux"
run = "pnpm exec electron-builder --linux"
depends = ["build"]

[tasks.electron]
description = "Run Electron (production mode)"
run = "pnpm run electron"
depends = ["build"]

[tasks."electron:dev"]
description = "Run Electron (development mode)"
run = "pnpm run electron:dev"
env = { NODE_ENV = "development", ELECTRON_IS_DEV = "1" }

[tasks.update]
description = "Update dependencies"
run = """
pnpm exec npm-check-updates -u
pnpm install
"""

[tasks.audit]
description = "Run security audit"
run = "pnpm audit"

[tasks.prepare]
description = "Prepare Git hooks with Husky"
run = "pnpm exec husky"

[tasks.docs]
description = "Generate API documentation"
run = "pnpm exec typedoc --out docs/api src"

[tasks.rebuild]
description = "Rebuild native modules for Electron"
run = "pnpm run rebuild"

[tasks.info]
description = "Show project information"
run = """
echo "Video Downloader - Electron App"
echo "================================"
echo "Node: $(node --version)"
echo "pnpm: $(pnpm --version)"
echo ""
echo "Run 'mise tasks' to see all available tasks"
"""

# Task aliases for convenience
[tasks.t]
alias = "test"

[tasks.d]
alias = "dev"

[tasks.b]
alias = "build"

[tasks.c]
alias = "check"

# Composite tasks
[tasks.ci]
description = "Run CI checks"
depends = ["check", "test", "build"]

[tasks.release]
description = "Prepare a release"
depends = ["check", "test", "build", "dist"]

[tasks.setup]
description = "Setup development environment"
run = "pnpm exec tsx scripts/setup.ts"

# Watch tasks
[tasks.watch]
description = "Watch mode for development"
run = """
pnpm exec concurrently -n "main,preload,renderer" \
  "pnpm exec esbuild src/main/index.ts --bundle --outdir=dist/main --watch --platform=node --target=node20 --format=esm --external:electron --external:better-sqlite3 --external:keytar --external:electron-store --external:winston --external:winston-daily-rotate-file --external:drizzle-orm" \
  "pnpm exec esbuild src/preload/index.ts --bundle --outdir=dist/preload --watch --platform=node --target=node20 --format=esm" \
  "pnpm exec vite"
"""

[tasks."watch:main"]
description = "Watch main process only"
run = "pnpm exec esbuild src/main/index.ts --bundle --outdir=dist/main --watch --platform=node --target=node20 --format=esm --external:electron --external:better-sqlite3 --external:keytar --external:electron-store --external:winston --external:winston-daily-rotate-file --external:drizzle-orm"

[tasks."watch:preload"]
description = "Watch preload script only"
run = "pnpm exec esbuild src/preload/index.ts --bundle --outdir=dist/preload --watch --platform=node --target=node20 --format=esm"

[tasks."watch:renderer"]
description = "Watch renderer process only"
run = "pnpm exec vite"