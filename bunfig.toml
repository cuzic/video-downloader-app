# Bun configuration for Video Downloader

# Package manager settings
[install]
# Prefer offline installation when possible
preferOffline = true

# Save exact versions
save-exact = true

# Global cache directory
globalDir = "~/.bun"

# Package installation settings
[install.scopes]
# Scope configurations for private packages
"@video-downloader" = { token = "$NPM_TOKEN" }

# Lock file settings
[install.lockfile]
# Save lockfile
save = true

# Print format (only 'yarn' is supported)
print = "yarn"

# Development settings
[dev]
# Port for development server
port = 3000

# Build settings
[build]
# Entry points for building
entrypoints = [
  "./src/main/index.ts",
  "./src/preload/index.ts", 
  "./src/renderer/main.tsx"
]

# Output directory
outdir = "./dist"

# Target environment
target = "node"

# External packages (not bundled)
external = [
  "electron",
  "better-sqlite3"
]

# Sourcemap generation
sourcemap = "external"

# Minification
minify = false

# Splitting
splitting = true

# Public path
publicPath = "./"

# Test runner configuration
[test]
# Root directory for tests
root = "./src"

# Test file patterns
include = [
  "**/*.test.ts",
  "**/*.test.tsx",
  "**/*.spec.ts",
  "**/*.spec.tsx"
]

# Coverage settings
coverage = true
coverageThreshold = 80

# Timeout for tests (ms)
timeout = 5000

# Watch mode
watch = false

# Run settings
[run]
# Auto-install missing packages
autoInstall = true

# Silent mode
silent = false

# Debugger settings
[debug]
# Enable source maps
sourcemap = true

# Inspector settings
inspect = "0.0.0.0:9229"

# Macro settings
[macro]
# Define compile-time constants
NODE_ENV = "development"

# Environment-specific overrides
[env.production]
NODE_ENV = "production"
minify = true
sourcemap = false

[env.development]
NODE_ENV = "development"
minify = false
sourcemap = true

# Scripts that can be run with 'bun run'
[scripts]
# Development
dev = "concurrently \"bun run dev:main\" \"bun run dev:renderer\" \"bun run dev:preload\""
"dev:main" = "bun --watch src/main/index.ts"
"dev:renderer" = "vite"
"dev:preload" = "bun build src/preload/index.ts --outdir dist/preload --watch"

# Building
build = "bun run build:main && bun run build:preload && bun run build:renderer"
"build:main" = "bun build src/main/index.ts --outdir dist/main --target node"
"build:preload" = "bun build src/preload/index.ts --outdir dist/preload --target node"
"build:renderer" = "vite build"

# Testing
test = "bun test"
"test:watch" = "bun test --watch"
"test:coverage" = "bun test --coverage"
"test:unit" = "bun test src/**/*.test.ts"
"test:e2e" = "playwright test"

# Code quality
lint = "eslint . --ext .ts,.tsx"
"lint:fix" = "eslint . --ext .ts,.tsx --fix"
format = "prettier --write ."
"format:check" = "prettier --check ."
typecheck = "tsc --noEmit"
"check:all" = "bun run typecheck && bun run lint && bun run format:check"

# Database
"db:generate" = "drizzle-kit generate:sqlite"
"db:push" = "drizzle-kit push:sqlite"
"db:studio" = "drizzle-kit studio"
"db:migrate" = "bun src/main/db/migrate.ts"

# Electron
electron = "electron ."
"electron:dev" = "electron . --dev"
dist = "electron-builder"
package = "bun run build && electron-builder"

# Utilities
clean = "rm -rf dist dist-electron node_modules"
"clean:cache" = "rm -rf .bun"
prepare = "husky"

# Dependencies to always bundle
[bundle]
packages = [
  "react",
  "react-dom",
  "zod"
]

# Native modules handling
[native]
# Better-sqlite3 needs to be rebuilt for Electron
rebuild = ["better-sqlite3"]

# Trusted dependencies (skip security checks)
[trustedDependencies]
packages = [
  "electron",
  "better-sqlite3",
  "esbuild"
]